@page "/agsidentity/changepassword"
@using AGS.Services.AGSIdentity;
@using AGSCommon.Models.ViewModels.AGSIdentity;
@using AGS.Services.AGS.Localization;
@using AGS.Models.ViewModels.Common;
@using Microsoft.AspNetCore.Http
@using AGSCommon.Models.EntityModels.Common;
@using AGS.Services.AGS;
@using AGS.Services.AGS.CurrentUser;
@inject IAGSIdentityService _AGSIdentityService
@inject ILocalizationService _localizer
@inject ICurrentUserService _currentUserService
@inject NavigationManager NavManager

<form>
    <div class="form-group">
        <label for="oldpassword">@_localizer.GetLocalizedString("ags_identity_change_password_oldpassword", _appStateContainer.Lang)</label>
        <input @bind="OldPassword" type="password" class="form-control" id="oldpassword" placeholder="@_localizer.GetLocalizedString("ags_identity_change_password_oldpassword", _appStateContainer.Lang)">
    </div>
    <div class="form-group">
        <label for="newpassword">@_localizer.GetLocalizedString("ags_identity_change_password_newpassword", _appStateContainer.Lang)</label>
        <input @bind="NewPassword" type="password" class="form-control" id="newpassword" placeholder="@_localizer.GetLocalizedString("ags_identity_change_password_newpassword", _appStateContainer.Lang)">
    </div>
    <div class="form-group">
        <label for="newpasswordconfirm">@_localizer.GetLocalizedString("ags_identity_change_password_newpasswordconfirm", _appStateContainer.Lang)</label>
        <input @bind="NewPasswordConfirm" type="password" class="form-control" id="newpasswordconfirm" placeholder="@_localizer.GetLocalizedString("ags_identity_change_password_newpasswordconfirm", _appStateContainer.Lang)">
    </div>
    @if (ShowSuccessMessage)
    {
<span class="text-success">@_localizer.GetLocalizedString("ags_success", _appStateContainer.Lang)</span>}
    <span class="text-danger">@_localizer.GetLocalizedString(ErrorMessage, _appStateContainer.Lang)</span>
    <button type="button" class="btn btn-primary" disabled="@isProcessing" @onclick="OnSaveClick">@_localizer.GetLocalizedString("ags_button_save", _appStateContainer.Lang)</button>
</form>

@code { [CascadingParameter]
    public AppStateContainer _appStateContainer { get; set; }

    public string OldPassword { get; set; }

    public string NewPassword { get; set; }

    public string NewPasswordConfirm { get; set; }

    public string UserId { get; set; }

    public bool ShowSuccessMessage { get; set; } = false;

    public string ErrorMessage = "";

    private bool isProcessing { get; set; } = false;

    protected override void OnInitialized()
    {
        // Set up the user id
        UserId = _currentUserService.GetCurrentUserId();

        base.OnInitialized();
    }

    protected async Task OnSaveClick()
    {
        ShowSuccessMessage = false;
        ErrorMessage = "";

        if (string.IsNullOrEmpty(OldPassword))
        {
            ErrorMessage = "ags_identity_change_password_oldpassword_empty_validation";
            return;
        }

        if (string.IsNullOrEmpty(NewPassword))
        {
            ErrorMessage = "ags_identity_change_password_newpassword_empty_validation";
            return;
        }

        if (string.IsNullOrEmpty(NewPasswordConfirm))
        {
            ErrorMessage = "ags_identity_change_password_newpasswordconfirm_empty_validation";
            return;
        }

        if (NewPassword != NewPasswordConfirm)
        {
            ErrorMessage = "ags_identity_change_password_password_not_match_validation";
            return;
        }

        ChangeUserPasswordViewModel changeModel = new ChangeUserPasswordViewModel()
        {
            UserId = UserId,
            NewPassword = NewPassword,
            OldPassword = OldPassword
        };

        try
        {
            isProcessing = true;
            await Task.Delay(1); // give the Thread some time to change UI
            bool result = await _AGSIdentityService.ChangePassword(changeModel);
            if (result)
            {
                ShowSuccessMessage = true;
            }
            else
            {
                ErrorMessage = "ags_fail";
            }
        }
        catch (AggregateException ex)
        {
            foreach (var e in ex.Flatten().InnerExceptions)
            {
                if (e is AGSException)
                {
                    CommonFunctions.HandleAGSResponseError(((AGSException)e).responseCode, NavManager, ref ErrorMessage);
                }
            }
        }
        catch (AGSException ex)
        {
            CommonFunctions.HandleAGSResponseError(ex.responseCode, NavManager, ref ErrorMessage);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }

    } }
