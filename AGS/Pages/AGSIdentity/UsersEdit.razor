@using AGS.Services.AGSIdentity;
@using AGSCommon.Models.EntityModels.AGSIdentity;
@using AGS.Services.AGS.Localization;
@using AGSCommon.Models.EntityModels.Common;
@using AGS.Models.ViewModels.Common;
@using AGS.Services.AGS;
@inject IAGSIdentityService _AGSIdentityService
@inject ILocalizationService _localizer
@inject NavigationManager NavManager

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">@(IsCreate ? _localizer.GetLocalizedString("ags_identity_user_create_header", _appStateContainer.Lang) : (_localizer.GetLocalizedString("ags_identity_user_edit_header", _appStateContainer.Lang) + ":" + UserEntity?.Username))</h5>
        <button type="button" class="close" @onclick="CloseEditModal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        <form>
            <div class="form-group">
                <label for="txtUsername">@_localizer.GetLocalizedString("ags_identity_user_edit_form_username", _appStateContainer.Lang)</label>
                <input type="text" class="form-control" id="txtUsername" @bind="Username">
            </div>
            <div class="form-group">
                <label for="txtEmail">@_localizer.GetLocalizedString("ags_identity_user_edit_form_email", _appStateContainer.Lang)</label>
                <input type="email" class="form-control" id="txtEmail" @bind="Email">
            </div>
            <div class="form-group">
                <label for="txtFirstName">@_localizer.GetLocalizedString("ags_identity_user_edit_form_firstname", _appStateContainer.Lang)</label>
                <input type="text" class="form-control" id="txtFirstName" @bind="First_Name">
            </div>
            <div class="form-group">
                <label for="txtLastName">@_localizer.GetLocalizedString("ags_identity_user_edit_form_lastname", _appStateContainer.Lang)</label>
                <input type="text" class="form-control" id="txtLastName" @bind="Last_Name">
            </div>
            <div class="form-group">
                <label for="txtTitle">@_localizer.GetLocalizedString("ags_identity_user_edit_form_title", _appStateContainer.Lang)</label>
                <input type="text" class="form-control" id="txtTitle" @bind="Title">
            </div>
            <div class="form-group">
                <label for="txtGroups">@_localizer.GetLocalizedString("ags_identity_user_edit_form_groups", _appStateContainer.Lang)</label>
                <AutoCompleteSelectControl SelectedItems="@GroupEntities"
                                           AvailableItems="@AvailableGroups"
                                           TextShowProperty="@OptionShowTextProperty"
                                           SearchFunc="AutoCompleteSelectSearchFunction"
                                           MatchFunc="AutoCompleteSelectMatchFunction"
                                           OnCallBackReturnSelectedItems="(Action<List<AGSGroupEntity>>)SetBackSelectedGroups">
                </AutoCompleteSelectControl>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <span class="text-danger">@_localizer.GetLocalizedString(ErrorMessage, _appStateContainer.Lang)</span>
        <button type="button" disabled="@isProcessing" class="btn btn-secondary @(isProcessing? "btn-disabled" : "")" @onclick="CloseEditModal">@_localizer.GetLocalizedString("ags_button_cancel", _appStateContainer.Lang)</button>
        <button type="button" disabled="@isProcessing" class="btn btn-primary @(isProcessing? "btn-disabled" : "")" @onclick="OnSaveClick">@_localizer.GetLocalizedString("ags_button_save", _appStateContainer.Lang)</button>
    </div>
</div>

@code { [CascadingParameter]
    public AppStateContainer _appStateContainer { get; set; }

    public string ErrorMessage = "";

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public EventCallback<bool> OnCallbackCloseEditModal { get; set; }

    [Parameter]
    public bool IsCreate { get; set; }

    public string Username { get; set; }

    public string Email { get; set; }

    public string First_Name { get; set; }

    public string Last_Name { get; set; }

    public string Title { get; set; }

    public AGSUserEntity UserEntity { get; set; }

    public bool ShowGroupList { get; set; } = false;

    public List<AGSGroupEntity> AvailableGroups { get; set; }

    public List<AGSGroupEntity> GroupEntities { get; set; }

    public string OptionShowTextProperty = "Name";

    private bool isProcessing { get; set; } = false;

    protected async Task OnSaveClick()
    {
        UserEntity.Username = Username;
        UserEntity.Email = Email;
        UserEntity.First_Name = First_Name;
        UserEntity.Last_Name = Last_Name;
        UserEntity.Title = Title;
        UserEntity.GroupIds = GroupEntities.Select(x => x.Id).ToList();
        try
        {
            isProcessing = true; await Task.Delay(1); // give the Thread some time to change UI
            await Task.Delay(1);
            var result = false;
            if (IsCreate)
            {
                result = !string.IsNullOrEmpty(await _AGSIdentityService.AddAGSUserEntity(UserEntity));
            }
            else
            {
                result = await _AGSIdentityService.UpdateAGSUserEntity(UserEntity);
            }


            if (result)
            {
                await OnCallbackCloseEditModal.InvokeAsync(true);
            }
        }
        catch (AggregateException ex)
        {
            foreach (var e in ex.Flatten().InnerExceptions)
            {
                if (e is AGSException)
                {
                    CommonFunctions.HandleAGSResponseError(((AGSException)e).responseCode, NavManager, ref ErrorMessage);
                }
            }
        }
        catch (AGSException ex)
        {
            CommonFunctions.HandleAGSResponseError(ex.responseCode, NavManager, ref ErrorMessage);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }

    }

    protected void CloseEditModal()
    {
        OnCallbackCloseEditModal.InvokeAsync(false);
    }

    protected override void OnParametersSet()
    {
        try
        {
            // initialize all form control
            ErrorMessage = "";
            Username = "";
            Email = "";
            First_Name = "";
            Last_Name = "";
            Title = "";
            GroupEntities = new List<AGSGroupEntity>();


            AvailableGroups = _AGSIdentityService.GetAGSGroupEntities().Result;

            if (!string.IsNullOrEmpty(UserId))
            {
                GroupEntities = _AGSIdentityService.GetUserGroups(UserId).Result;
                UserEntity = _AGSIdentityService.GetAGSUserEntity(UserId).Result;
                Username = UserEntity.Username;
                Email = UserEntity.Email;
                First_Name = UserEntity.First_Name;
                Last_Name = UserEntity.Last_Name;
                Title = UserEntity.Title;
            }
            else
            {
                UserEntity = new AGSUserEntity()
                {
                    Id = ""
                };
            }



        }
        catch (AGSException ex)
        {
            CommonFunctions.HandleAGSResponseError(ex.responseCode, NavManager, ref ErrorMessage);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

        base.OnParametersSet();
    }

    public bool AutoCompleteSelectSearchFunction(AGSGroupEntity groupEntity, string textSearch)
    {
        return groupEntity.Name.Contains(textSearch, StringComparison.OrdinalIgnoreCase);
    }

    public void SetBackSelectedGroups(List<AGSGroupEntity> selectedGroups)
    {
        GroupEntities = selectedGroups;
    }

    public bool AutoCompleteSelectMatchFunction(AGSGroupEntity groupEntity1, AGSGroupEntity groupEntity2)
    {
        return groupEntity1.Id == groupEntity2.Id;
    } }
