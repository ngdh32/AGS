@page "/agsidentity/groups"
@using AGS.Services.AGSIdentity;
@using AGSCommon.Models.EntityModels.AGSIdentity;
@using AGS.Services.AGS.Localization;
@using AGS.Models.ViewModels.Common;
@using AGSCommon.Models.EntityModels.Common;
@inject IAGSIdentityService _AGSIdentityService
@inject ILocalizationService _localizer
@inject NavigationManager NavManager

<div>
    <div style="display: inline-block;">
        <h3>@_localizer.GetLocalizedString("ags_identity_group_admin_header", _appStateContainer.Lang)</h3>
    </div>
    <button class="btn btn-primary" style="float: right;" @onclick="OnAddClick">@_localizer.GetLocalizedString("ags_button_add", _appStateContainer.Lang)</button>
</div>

<table class="table table-hover">
    <thead class="thead-light">
        <tr>
            <th scope="col">@_localizer.GetLocalizedString("ags_identity_group_admin_table_name", _appStateContainer.Lang)</th>
            <th></th>
        </tr>
    </thead>
    <tbody class="table-hover">
        @if (agsGroups != null)
        {
            @foreach (var agsGroup in agsGroups)
            {
                <tr>
                    <td>
                        <a href="#" @onclick:preventDefault @onclick="@(e => OnEditClick(agsGroup.Id))">
                            @agsGroup.Name
                        </a>
                    </td>
                    <td>
                        <a @onclick="@(e => OnDeleteClick(agsGroup.Id, agsGroup.Name))" href="#" @onclick:preventDefault>
                            @_localizer.GetLocalizedString("ags_button_delete", _appStateContainer.Lang)
                        </a>
                    </td>
                </tr>

            }
        }
    </tbody>
</table>

<div class="modal fade @EditModalClass" style="display: @EditModalDisplay;" id="GroupEditModal" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <GroupEdit OnCallbackCloseEditModal="CallbackCloseEditModal" IsCreate="@IsEditModalCreate" GroupId="@SelectedGroupId"></GroupEdit>
    </div>
</div>

<div class="modal fade @DeleteModalClass" style="display: @DeleteModalDisplay;" id="GroupDeleteModal" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <DeleteModal ToBeDeleteId="@SelectedDeleteGroupId"
                 DeleteConfirmMessage="@(_localizer.GetLocalizedString("ags_identity_group_admin_delete_confirm_dialog_info", _appStateContainer.Lang)+":"+SelectedDeleteGroupname+"?")"
                 DeleteMethod="_AGSIdentityService.DeleteAGSGroupEntity"
                 OnCallbackCloseDeleteModal="CallbackCloseDeleteModal"></DeleteModal>
</div>

@code {
    [CascadingParameter]
    public AppStateContainer _appStateContainer { get; set; }

    private List<AGSGroupEntity> agsGroups { get; set; }


    private string SelectedGroupId { get; set; }
    private bool IsEditModalCreate => string.IsNullOrEmpty(SelectedGroupId) ? true : false;
    private bool ShowEditModal { get; set; } = false;
    private string EditModalClass => ShowEditModal ? "show" : "";
    private string EditModalDisplay => ShowEditModal ? "block" : "none";

    private string SelectedDeleteGroupId { get; set; } = "";
    private string SelectedDeleteGroupname { get; set; } = "";
    private bool ShowDeleteModal { get; set; } = false;
    private string DeleteModalClass => ShowDeleteModal ? "show" : "";
    private string DeleteModalDisplay => ShowDeleteModal ? "block" : "none";


    private string ErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        FetchData();

        base.OnInitialized();
    }

    protected void FetchData()
    {
        try
        {
            var result = _AGSIdentityService.GetAGSGroupEntities();
            agsGroups = result;
        }
        catch (AGSException ex)
        {
            if (ex.responseCode == AGSResponse.ResponseCodeEnum.TokenExpiredError)
            {
                NavManager.NavigateTo("/logout");
            }
            else
            {
                ErrorMessage = ex.responseCode.ToString();
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected void CallbackCloseEditModal(bool reloadData)
    {
        SelectedGroupId = "";
        ShowEditModal = false;
        if (reloadData)
        {
            FetchData();
        }
    }

    protected void OnDeleteClick(string groupId, string groupName)
    {
        SelectedDeleteGroupId = groupId;
        SelectedDeleteGroupname = groupName;
        ShowDeleteModal = true;
    }

    protected void CallbackCloseDeleteModal(bool isDelete)
    {
        if (isDelete)
        {
            FetchData();
        }
        SelectedDeleteGroupId = "";
        SelectedDeleteGroupname = "";
        ShowDeleteModal = false;
    }

    protected void OnEditClick(string groupId)
    {
        SelectedGroupId = groupId;
        ShowEditModal = true;
    }

    protected void OnAddClick()
    {
        SelectedGroupId = "";
        ShowEditModal = true;
    }
}
