@using AGS.Services.AGSIdentity;
@using AGSCommon.Models.EntityModels.AGSIdentity;
@using AGS.Services.AGS.Localization;
@using AGSCommon.Models.EntityModels.Common;
@using AGS.Models.ViewModels.Common;
@inject IAGSIdentityService _AGSIdentityService
@inject ILocalizationService _localizer

    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="staticBackdropLabel">@(IsCreate ? _localizer.GetLocalizedString("ags_identity_group_create_header", _appStateContainer.Lang) : (_localizer.GetLocalizedString("ags_identity_group_edit_header", _appStateContainer.Lang) + ":" + GroupEntity?.Name))</h5>
            <button type="button" class="close" @onclick="CloseEditModal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">
            <form>
                <div class="form-group">
                    <label for="txtGroupname">@_localizer.GetLocalizedString("ags_identity_group_admin_table_name", _appStateContainer.Lang)</label>
                    <input type="text" class="form-control" id="txtGroupname" @bind="Groupname">
                </div>
                <div class="form-group">
                    <label for="txtFunctionClaims">@_localizer.GetLocalizedString("ags_identity_group_edit_form_functionClaims", _appStateContainer.Lang)</label>
                    <AutoCompleteSelectControl SelectedItems="@FunctionClaims"
                                               AvailableItems="@AvailableFunctionClaims"
                                               TextShowProperty="@OptionShowTextProperty"
                                               SearchFunc="AutoCompleteSelectSearchFunction"
                                               MatchFunc="AutoCompleteSelectMatchFunction"
                                               OnCallBackReturnSelectedItems="(Action<List<AGSFunctionClaimEntity>>)SetBackSelectedFunctionClaims">
                    </AutoCompleteSelectControl>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <span class="text-danger">@ErrorMessage</span>
            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">@_localizer.GetLocalizedString("ags_button_cancel", _appStateContainer.Lang)</button>
            <button type="button" class="btn btn-primary" @onclick="OnSaveClick">@_localizer.GetLocalizedString("ags_button_save", _appStateContainer.Lang)</button>
        </div>
    </div>

@code {
    [CascadingParameter]
    public AppStateContainer _appStateContainer { get; set; }

    public string ErrorMessage { get; set; }

    [Parameter]
    public EventCallback<bool> OnCallbackCloseEditModal { get; set; }

    [Parameter]
    public bool IsCreate { get; set; }

    [Parameter]
    public string GroupId { get; set; }

    public string Groupname { get; set; }

    public AGSGroupEntity GroupEntity { get; set; }

    public List<AGSFunctionClaimEntity> FunctionClaims { get; set; }

    public List<AGSFunctionClaimEntity> AvailableFunctionClaims { get; set; }

    public string OptionShowTextProperty { get; set; } = "Name";

    protected override void OnParametersSet()
    {
        // initialize all form control
        ErrorMessage = "";
        Groupname = "";
        FunctionClaims = new List<AGSFunctionClaimEntity>();


        AvailableFunctionClaims = _AGSIdentityService.GetFunctionClaimEntities();

        if (!string.IsNullOrEmpty(GroupId))
        {
            FunctionClaims = _AGSIdentityService.GetGroupFunctionClaims(GroupId);
            GroupEntity = _AGSIdentityService.GetAGSGroupEntity(GroupId);
            Groupname = GroupEntity.Name;
        }
        else
        {
            GroupEntity = new AGSGroupEntity()
            {
                Id = ""
            };
        }


        base.OnParametersSet();
    }

    protected void OnSaveClick()
    {
        GroupEntity.Name = Groupname;
        GroupEntity.FunctionClaimIds = FunctionClaims.Select(x => x.Id).ToList();
        try
        {
            var result = false;
            if (IsCreate)
            {
                result = !string.IsNullOrEmpty(_AGSIdentityService.AddAGSGroupEntity(GroupEntity));
            }
            else
            {
                result = _AGSIdentityService.UpdateAGSGroupEntity(GroupEntity);
            }


            if (result)
            {
                OnCallbackCloseEditModal.InvokeAsync(true);
            }
        }
        catch (AGSException ex)
        {
            ErrorMessage = ex.responseCode.ToString();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }

    protected void CloseEditModal()
    {
        OnCallbackCloseEditModal.InvokeAsync(false);
    }

    public bool AutoCompleteSelectSearchFunction(AGSFunctionClaimEntity functionClaimEntity, string textSearch)
    {
        return functionClaimEntity.Name.Contains(textSearch, StringComparison.OrdinalIgnoreCase);
    }

    public void SetBackSelectedFunctionClaims(List<AGSFunctionClaimEntity> selectedFunctionClaims)
    {
        FunctionClaims = selectedFunctionClaims;
    }

    public bool AutoCompleteSelectMatchFunction(AGSFunctionClaimEntity functionClaim1, AGSFunctionClaimEntity functionClaim2)
    {
        return functionClaim1.Id == functionClaim2.Id;
    }

}
