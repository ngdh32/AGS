@using AGSCommon.Models.EntityModels.Common;
@using AGS.Services.AGS.Localization;
@using AGS.Models.ViewModels.Common;
@using AGS.Services.AGS;
@inject ILocalizationService _localizer
@inject NavigationManager NavManager


<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-body">
            <p>@ConfirmMessage</p>
        </div>
        <div class="modal-footer">
            <span class="text-danger">@_localizer.GetLocalizedString(ErrorMessage, _appStateContainer.Lang)</span>
            <button type="button" disabled="@isProcessing" class="btn btn-secondary" @onclick="OnCancel">@_localizer.GetLocalizedString("ags_button_cancel", _appStateContainer.Lang)</button>
            <button type="button" disabled="@isProcessing" class="btn btn-primary" @onclick="OnConfirm">@_localizer.GetLocalizedString("ags_button_confirm", _appStateContainer.Lang)</button>
        </div>
    </div>
</div>


@code { [CascadingParameter]
    public AppStateContainer _appStateContainer { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string ConfirmMessage { get; set; }

    public string ErrorMessage = "";

    [Parameter]
    public Func<string, Task<bool>> ConfirmMethod { get; set; }

    [Parameter]
    public EventCallback<bool> OnCallbackCloseModal { get; set; }

    private bool isProcessing { get; set; } = false;

    public void OnCancel()
    {
        // pass false to show it is cancel
        OnCallbackCloseModal.InvokeAsync(false);
    }

    public async Task OnConfirm()
    {
        try
        {
            isProcessing = true;
            await Task.Delay(1); // give the Thread some time to change UI
            await ConfirmMethod(Id);
            await OnCallbackCloseModal.InvokeAsync(true); // pass true to show it is confirm
        }
        catch (AggregateException ex)
        {
            foreach (var e in ex.Flatten().InnerExceptions)
            {
                if (e is AGSException)
                {
                    CommonFunctions.HandleAGSResponseError(((AGSException)e).responseCode, NavManager, ref ErrorMessage);
                }
            }
        }
        catch (AGSException ex)
        {
            CommonFunctions.HandleAGSResponseError(ex.responseCode, NavManager, ref ErrorMessage);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }

    }

}
