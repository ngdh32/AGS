# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main
- AGSDocument
- AGSFlow

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.x'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: |
      **/AGSIdentity.csproj
      **/AGSIdentity_Test.csproj
    arguments: '--configuration $(buildConfiguration)'


# ...
# do this after other tasks such as building
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Test.csproj'
    arguments: '--configuration $(buildConfiguration)'

#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    msbuildArgs: '/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl="$(System.DefaultWorkingDirectory)\\WebAppContent" /t:AGSIdentity;AGSIdentity_Test'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#- task: VisualStudioTestPlatformInstaller@1
#  inputs:
#    packageFeedSelector: 'nugetOrg'
#    versionSelector: 'latestPreRelease'

#- task: VSTest@2
#  inputs:
#    testSelector: 'testAssemblies'
#    testAssemblyVer2: |
#      **\bin\$(BuildConfiguration)\**\*test*.dll
#      !**\obj\**
#      !**\xunit.runner.visualstudio.testadapter.dll
#      !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
#    searchFolder: '$(System.DefaultWorkingDirectory)'
#    vsTestVersion: 'toolsInstaller'


#- task: ArchiveFiles@2
#  inputs:
#    rootFolderOrFile: '$(System.DefaultWorkingDirectory)\\WebAppContent'
#    includeRootFolder: false
#    archiveType: 'zip'
#    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#    replaceExistingArchive: true
  

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Artifact'
#  inputs:
#    PathtoPublish: '$(build.artifactstagingdirectory)'
#  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
    projects: |
      **/AGSIdentity.csproj


# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'AGSIdentity'